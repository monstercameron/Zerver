name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: zig-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: zerver-example-windows
            artifact_path: zig-out/bin/zerver_example.exe
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Restore Zig global cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: zig-global-${{ runner.os }}-${{ env.ZIG_VERSION }}
          restore-keys: zig-global-${{ runner.os }}-

      - name: Restore Zig global cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: zig-global-${{ runner.os }}-${{ env.ZIG_VERSION }}
          restore-keys: zig-global-${{ runner.os }}-

      # ---------- Primary installer with retry ----------
      - name: Install Zig (primary, with retry)
        id: setup_zig_primary
        uses: goto-bus-stop/setup-zig @v2
        with:
          version: ${{ env.ZIG_VERSION }}
        continue-on-error: true

      - name: Verify Zig (primary)
        id: verify_primary
        if: steps.setup_zig_primary.outcome == 'success'
        run: |
          zig version
          zig env

      # ---------- Fallback installer (mlugg) ----------
      - name: Install Zig (fallback action)
        id: setup_zig_fallback
        if: steps.setup_zig_primary.outcome != 'success'
        uses: mlugg/setup-zig @v1
        with:
          version: ${{ env.ZIG_VERSION }}
        continue-on-error: true

      - name: Verify Zig (fallback action)
        id: verify_fallback
        if: steps.setup_zig_primary.outcome != 'success' && steps.setup_zig_fallback.outcome == 'success'
        run: |
          zig version
          zig env

      # ---------- Final fallback: manual download from official sources ----------
      # Windows manual install
      - name: Manual install (Windows)
        if: runner.os == 'Windows' && steps.setup_zig_primary.outcome != 'success' && steps.setup_zig_fallback.outcome != 'success'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "zig-windows-x86_64-${env:ZIG_VERSION}.zip"
          $urls = @(
            "https://github.com/ziglang/zig/releases/download/${env:ZIG_VERSION}/$zip",
            "https://ziglang.org/builds/$zip"
          )
          $ok = $false
          foreach ($u in $urls) {
            try {
              Write-Host "Downloading $u"
              Invoke-WebRequest -Uri $u -OutFile zig.zip -UseBasicParsing
              $ok = $true; break
            } catch { Start-Sleep -Seconds 2 }
          }
          if (-not $ok) { throw "Failed to download Zig $($env:ZIG_VERSION) from official mirrors." }

          # Expand to zigdl and add to PATH
          Expand-Archive -Path zig.zip -DestinationPath zigdl -Force
          $dir = Get-ChildItem zigdl | Select-Object -First 1
          echo "$($dir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append

          & "$($dir.FullName)\zig.exe" version
          & "$($dir.FullName)\zig.exe" env

      # ---------- Final verification (must pass) ----------
      - name: Confirm Zig is available
        shell: bash
        run: |
          set -e
          command -v zig || (echo "zig not on PATH" && exit 1)
          zig version
          zig env

      # - name: Check Semantic Version Bump
      #   id: check_semver
      #   run: |
      #     # Determine base commit for comparison
      #     $baseCommit = ""
      #     if ("${{ github.event_name }}" -eq "push") {
      #       $baseCommit = "HEAD^"
      #     } else {
      #       $baseCommit = "origin/${{ github.base_ref }}"
      #     }

      #     # Get previous version from config.json in base commit
      #     $previousConfig = git show "$baseCommit`:config.json"
      #     $previousVersion = (ConvertFrom-Json $previousConfig).project.version

      #     # Get current version from config.json
      #     $currentConfig = Get-Content config.json | Out-String
      #     $currentVersion = (ConvertFrom-Json $currentConfig).project.version

      #     Write-Host "Previous version: $previousVersion" -ForegroundColor Yellow
      #     Write-Host "Current version: $currentVersion" -ForegroundColor Yellow

      #     # Compare versions using PowerShell's [version] type
      #     if ($currentVersion -eq $previousVersion) {
      #       Write-Host "Error: Version has not been bumped!" -ForegroundColor Red
      #       exit 1
      #     } elseif ([version]$currentVersion -lt [version]$previousVersion) {
      #       Write-Host "Error: Current version is less than previous version!" -ForegroundColor Red
      #       exit 1
      #     } else {
      #       Write-Host "Version successfully bumped." -ForegroundColor Green
      #     }
      #   shell: pwsh

      - name: Build (ReleaseSafe)
        run: zig build -Doptimize=ReleaseSafe

      - name: Run tests
        run: zig build test

      - name: Check formatting
        run: zig fmt --check .

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

      # ---------- Save updated global cache ----------
      - name: Save Zig global cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: zig-global-${{ runner.os }}-${{ env.ZIG_VERSION }}

  release:
    needs: build # This job depends on the 'build' job
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to main
    runs-on: ubuntu-latest # Use ubuntu for release job, as it's common for release actions

    steps:
      - uses: actions/checkout@v4

      - name: Get version from config.json
        id: get_version
        run: |
          VERSION=$(jq -r '.project.version' config.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: zerver-example-windows # Name of the artifact uploaded by the build job
          path: ./release_assets # Directory to download the artifact to

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            Automated release for version ${{ env.VERSION }}.
            See the [CHANGELOG](CHANGELOG.md) for details.
          draft: false
          prerelease: false
          files: ./release_assets/* # Upload all files in the release_assets directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub