name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ZIG_VERSION: "0.15.2"

concurrency:
  group: zig-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: build (windows-latest)
    runs-on: windows-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      # --- Primary installer (stable 0.15.2) ---
      - name: Install Zig (primary)
        id: setup_zig_primary
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}
        continue-on-error: true

      - name: Verify Zig (primary)
        if: steps.setup_zig_primary.outcome == 'success'
        shell: pwsh
        run: |
          zig version
          zig env

      # --- Fallback installer (mlugg) ---
      - name: Install Zig (fallback)
        id: setup_zig_fallback
        if: steps.setup_zig_primary.outcome != 'success'
        uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}
        continue-on-error: true

      - name: Verify Zig (fallback)
        if: steps.setup_zig_primary.outcome != 'success' && steps.setup_zig_fallback.outcome == 'success'
        shell: pwsh
        run: |
          zig version
          zig env

      # --- Final fallback: manual download (official mirrors) ---
      - name: Manual install (Windows)
        if: runner.os == 'Windows' && steps.setup_zig_primary.outcome != 'success' && steps.setup_zig_fallback.outcome != 'success'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "zig-windows-x86_64-${env:ZIG_VERSION}.zip"
          $urls = @(
            "https://github.com/ziglang/zig/releases/download/${env:ZIG_VERSION}/$zip",
            "https://ziglang.org/builds/$zip"
          )
          $ok = $false
          foreach ($u in $urls) {
            try {
              Write-Host "Downloading $u"
              Invoke-WebRequest -Uri $u -OutFile zig.zip -UseBasicParsing
              $ok = $true; break
            } catch { Start-Sleep -Seconds 2 }
          }
          if (-not $ok) { throw "Failed to download Zig $($env:ZIG_VERSION) from official mirrors." }

          Expand-Archive -Path zig.zip -DestinationPath zigdl -Force
          $dir = Get-ChildItem zigdl | Select-Object -First 1
          "$($dir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append

          & "$($dir.FullName)\zig.exe" version
          & "$($dir.FullName)\zig.exe" env

      # --- Ensure no zig/master in PATH (donâ€™t fail if zig missing) ---
      - name: Scrub any zig\\master from PATH
        shell: pwsh
        run: |
          $parts = $env:PATH -split ';' | Where-Object { $_ -and ($_ -notmatch '\\zig\\master\\') }
          $env:PATH = ($parts -join ';')
          $cmd = Get-Command zig -ErrorAction SilentlyContinue
          if ($cmd) {
            Write-Host "zig path: $($cmd.Source)"
          } else {
            Write-Host "zig not yet on PATH (will be validated next step)"
          }

      # --- Final verification (must pass) ---
      - name: Confirm Zig is available
        shell: pwsh
        run: |
          $cmd = Get-Command zig -ErrorAction Stop
          zig version
          zig env

      # --- Build / Test ---
      - name: Build (ReleaseSafe)
        shell: pwsh
        run: zig build -Doptimize=ReleaseSafe

      - name: Run tests
        shell: pwsh
        run: zig build test

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: zerver-example-windows
          path: zig-out/bin/zerver_example.exe
          if-no-files-found: error

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get version from config.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(jq -r '.project.version' config.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine release version
        id: determine_release
        shell: bash
        run: |
          git fetch --tags --quiet
          BASE="${{ steps.get_version.outputs.version }}"
          if [[ ! "$BASE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Unsupported semantic version: $BASE" >&2
            exit 1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          VERSION="$BASE"

          while git rev-parse -q --verify "refs/tags/v${VERSION}" >/dev/null; do
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          done

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          if [ "$VERSION" != "$BASE" ]; then
            echo "bumped=true" >> "$GITHUB_OUTPUT"
            echo "release_version_bumped=true" >> "$GITHUB_ENV"
            echo "release_version_previous=${BASE}" >> "$GITHUB_ENV"
          else
            echo "bumped=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: zerver-example-windows
          path: ./release_assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.determine_release.outputs.version }}
          name: Release v${{ steps.determine_release.outputs.version }}
          body: |
            Automated release for version ${{ steps.determine_release.outputs.version }}.
            ${{ steps.determine_release.outputs.bumped == 'true' && format('Original config requested version {0}.', steps.get_version.outputs.version) || '' }}
            See the [CHANGELOG](CHANGELOG.md) for details.
          draft: false
          prerelease: false
          files: ./release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
