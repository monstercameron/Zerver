name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: zig-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    env:
      # Pin the Zig toolchain you want:
      ZIG_VERSION: 0.15.2
      # Put Zig caches in the workspace so caching works predictably
      ZIG_GLOBAL_CACHE_DIR: ${{ github.workspace }}\.zig-cache\global

    strategy:
      matrix:
        include:
          - artifact_name: zerver-example-windows
            artifact_path: zig-out\bin\zerver_example.exe

    steps:
      - name: Checkout (no submodules)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      - name: Prepare Zig cache dir
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:ZIG_GLOBAL_CACHE_DIR" | Out-Null

      - name: Restore Zig global cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: zig-global-${{ runner.os }}-${{ env.ZIG_VERSION }}
          restore-keys: |
            zig-global-${{ runner.os }}-

      # Primary installer (most reliable)
      - name: Install Zig (primary)
        id: setup_zig_primary
        uses: goto-bus-stop/setup-zig@v2
        with:
          zig-version: ${{ env.ZIG_VERSION }}
        continue-on-error: true

      - name: Verify Zig (primary)
        if: steps.setup_zig_primary.outcome == 'success'
        shell: pwsh
        run: |
          zig version
          zig env

      # Fallback: manual download if the action fails (rare)
      - name: Manual install (Windows fallback)
        if: steps.setup_zig_primary.outcome != 'success'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "zig-windows-x86_64-${env:ZIG_VERSION}.zip"
          $urls = @(
            "https://github.com/ziglang/zig/releases/download/${env:ZIG_VERSION}/$zip",
            "https://ziglang.org/builds/$zip"
          )
          $ok = $false
          foreach ($u in $urls) {
            try {
              Write-Host "Downloading $u"
              Invoke-WebRequest -Uri $u -OutFile zig.zip -UseBasicParsing
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }
          if (-not $ok) { throw "Failed to download Zig $($env:ZIG_VERSION) from official mirrors." }
          Expand-Archive -Path zig.zip -DestinationPath zigdl -Force
          $dir = Get-ChildItem zigdl | Select-Object -First 1
          # put zig on PATH
          "$($dir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          & "$($dir.FullName)\zig.exe" version
          & "$($dir.FullName)\zig.exe" env

      - name: Confirm Zig is available
        shell: pwsh
        run: |
          if (-not (Get-Command zig -ErrorAction SilentlyContinue)) {
            Write-Error "zig not on PATH"
            exit 1
          }
          zig version

      - name: Build (ReleaseSafe)
        shell: pwsh
        run: zig build -Doptimize=ReleaseSafe

      - name: Run tests
        shell: pwsh
        run: zig build test

      - name: Check formatting
        shell: pwsh
        run: zig fmt --check .

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

      - name: Save Zig global cache
        if: always()
        uses: actions/cache@v4
        with:
          path: ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: zig-global-${{ runner.os }}-${{ env:ZIG_VERSION }}

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get version from config.json
        id: get_version
        run: |
          VERSION=$(jq -r '.project.version' config.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: zerver-example-windows
          path: ./release_assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            Automated release for version ${{ env.VERSION }}.
            See the CHANGELOG for details.
          draft: false
          prerelease: false
          files: ./release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
